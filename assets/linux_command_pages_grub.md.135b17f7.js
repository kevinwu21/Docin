import{_ as s,c as n,o as a,a as e}from"./app.82736834.js";const u=JSON.parse('{"title":"grub","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"relativePath":"linux/command/pages/grub.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/grub.md"},p=e(`<h1 id="grub" tabindex="-1">grub <a class="header-anchor" href="#grub" aria-hidden="true">#</a></h1><p>多重引导程序grub的命令行shell工具</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>grub命令</strong> 是多重引导程序grub的命令行shell工具。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">grub(选项</span><span style="color:#EEFFFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">--batch：打开批处理模式；</span></span>
<span class="line"><span style="color:#FFCB6B;">--boot-drive=&lt;驱动器&gt;：指定stage2的引导驱动器；</span></span>
<span class="line"><span style="color:#FFCB6B;">--config-file&lt;配置文件&gt;：指定stage2的配置文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">--device-map=&lt;文件&gt;：指定设备的映射文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">--help：显示帮助信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">--install-partition=&lt;分区&gt;：指定stage2安装分区；</span></span>
<span class="line"><span style="color:#FFCB6B;">--no-config-file：不使用配置文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">--no-pager：不使用内部分页器；</span></span>
<span class="line"><span style="color:#FFCB6B;">--preset-menu：使用预设菜单；</span></span>
<span class="line"><span style="color:#FFCB6B;">--probe-second-floppy：检测第二个软盘驱动器；</span></span>
<span class="line"><span style="color:#FFCB6B;">--</span><span style="color:#82AAFF;">read</span><span style="color:#FFCB6B;">-only：只读模式。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><p>利用grub命令来启动损坏的Linux系统，可能你的电脑因为某些原因损坏不能自动启动了。当然原因很多，可能的现象也很多。</p><p>这里说一下这种情况下的处理方法，即：屏幕上提示<code>grub&gt;</code>，但你的硬盘上数据没有丢失，各分区都是好的。这种情况是你的grub信息损坏了，但比较严重的是系统启动不了。</p><p>当然，在正常启动情况下，屏幕上出现grub的启动项选择菜单时按<code>c</code>键也是可以进入<code>grub&gt;</code>状态的。这时候我们需要用grub的命令来手工启动系统。</p><p>只需要用到四个命令boot、kernel、initrd、boot。</p><p>但grub本身命令很多，比如查看文件内容的cat ，你输入help会得到。</p><p>首先，输入“ root (hd ” ，然后按两次 TAB 键； /* 这会列出你电脑上可能的磁盘设备，硬盘为 hd0/hd1 或 sd0/sd1 等 */</p><p>然后，选择你的安装 Linux 系统的硬盘，比如 hd0 ，输入 “ root (hd0, ” 再按两次 TAB 键； /* 这会列出你的第一块硬盘上的分区情况，你会知道哪个是 swap 交换分区， 0x82 ，哪个是 Linux 分区 0x83 */</p><p>选择你认为可能的 /boot 目录所在的分区， 输入<code>root (hd0, 1)</code>回车；</p><p>接着，输入<code>cat /boot/vm</code>， 按两次 TAB 键，如果出现一些 vm 开头的文件，比如 vmlinuz-2.6.15-26-386 说明这里是 /boot 所在的分区。</p><p>删除上一次的输入，再输入<code>cat /boot/initrd</code>，按两次 TAB 键，如果出现一些 initrd 开头的文件，比如 initrd.img-2.6.15-26-386 说明这个 /boot 所在的分区有 initrd ，即 ramdisk 镜像；</p><p>删除上一次的输入，再输入<code>cat /sbin/init</code>，按两次 TAB 键，如果出现一些 init 开头的文件，比如<code>/sbin/init</code>说明这个分区是<code>/</code>所在的分区；</p><p>如果没有出现<code>/sbin/init</code>文件，说明<code>(hd0,1)</code>分区仅仅是<code>/boot</code>分区而不是<code>/</code>分区。重新输入<code>root (hd0,N)</code>命令，这里 N 是某个 Linux 分区，然后再试<code>cat /sbin/init</code>， 直到屏幕上出现<code>/sbin/init</code>，说明你找到了<code>/</code>分区，严格来说，应该是<code>/sbin</code>目录所在的分区；</p><p>依次输入命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">root</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">hd0,1</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;">   </span><span style="color:#C3E88D;">/</span><span style="color:#EEFFFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">假设</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/dev/hda2</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">是你的</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/boot</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">所在的分区</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;">*</span><span style="color:#C3E88D;">/</span></span>
<span class="line"><span style="color:#FFCB6B;">kernel</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/boot/vmlinuz-2.6.15-</span><span style="color:#F78C6C;">26</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">386</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">ro</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">dev=/dev/hda3</span><span style="color:#EEFFFF;">    </span><span style="color:#C3E88D;">/</span><span style="color:#EEFFFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">假设</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/dev/hda3</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">是你的</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">所在的分区</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;">*</span><span style="color:#C3E88D;">/</span></span>
<span class="line"><span style="color:#FFCB6B;">initrd</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/boot/initrd.img-2.6.15-</span><span style="color:#F78C6C;">26</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">386</span></span>
<span class="line"><span style="color:#FFCB6B;">boot</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>即可启动系统。</p><p>这里的关键问题是如何确定系统的几个分区：<code>/boot</code> <code>/</code> <code>/sbin</code></p>`,25),o=[p];function r(c,t,i,d,F,b){return a(),n("div",null,o)}const h=s(l,[["render",r]]);export{u as __pageData,h as default};

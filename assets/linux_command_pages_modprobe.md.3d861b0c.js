import{_ as s,c as a,o as e,a as n}from"./app.82736834.js";const h=JSON.parse('{"title":"modprobe","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"relativePath":"linux/command/pages/modprobe.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/modprobe.md"},p=n(`<h1 id="modprobe" tabindex="-1">modprobe <a class="header-anchor" href="#modprobe" aria-hidden="true">#</a></h1><p>自动处理可载入模块</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>modprobe命令</strong> 用于智能地向内核中加载模块或者从内核中移除模块。</p><p>modprobe可载入指定的个别模块，或是载入一组相依的模块。modprobe会根据depmod所产生的相依关系，决定要载入哪些模块。若在载入过程中发生错误，在modprobe会卸载整组的模块。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">modprobe(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-a或--all：载入全部的模块；</span></span>
<span class="line"><span style="color:#FFCB6B;">-c或--show-conf：显示所有模块的设置信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-d或--debug：使用排错模式；</span></span>
<span class="line"><span style="color:#FFCB6B;">-l或--list：显示可用的模块；</span></span>
<span class="line"><span style="color:#FFCB6B;">-r或--remove：模块闲置不用时，即自动卸载模块；</span></span>
<span class="line"><span style="color:#FFCB6B;">-t或--</span><span style="color:#82AAFF;">type</span><span style="color:#FFCB6B;">：指定模块类型；</span></span>
<span class="line"><span style="color:#FFCB6B;">-v或--verbose：执行时显示详细的信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-V或--version：显示版本信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-help：显示帮助。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><p>模块名：要加载或移除的模块名称。</p><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><p><strong>查看modules的配置文件：</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">modprobe</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-c</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，可以查看modules的配置文件，比如模块的alias别名是什么等。会打印许多行信息，例如其中的一行会类似如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">alias</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">symbol:ip_conntrack_unregister_notifier</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">ip_conntrack</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>列出内核中所有已经或者未挂载的所有模块：</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">modprobe</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-l</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，我们能查看到我们所需要的模块，然后根据我们的需要来挂载；其实<code>modprobe -l</code>读取的模块列表就位于/lib/modules/\`uname -r \`目录中；其中<code>uname -r</code>是内核的版本，例如输出结果的其中一行是：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">/lib/modules/2.6.18-348.6.1.el5/kernel/net/netfilter/xt_statistic.ko</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>挂载vfat模块：</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">modprobe</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">vfat</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，使用格式<code>modprobe 模块名</code>来挂载一个模块。挂载之后，用lsmod可以查看已经挂载的模块。模块名是不能带有后缀的，我们通过<code>modprobe -l</code>所看到的模块，都是带有<code>.ko</code>或<code>.o</code>后缀。</p><p><strong>移除已经加载的模块：</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">modprobe</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">模块名</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，移除已加载的模块，和rmmod功能相同。</p>`,26),r=[p];function o(i,c,t,d,b,m){return e(),a("div",null,r)}const F=s(l,[["render",o]]);export{h as __pageData,F as default};

import{_ as s,c as a,o as n,a as e}from"./app.82736834.js";const u=JSON.parse('{"title":"mknod","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"扩展知识","slug":"扩展知识","link":"#扩展知识","children":[]}]}],"relativePath":"linux/command/pages/mknod.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/mknod.md"},p=e(`<h1 id="mknod" tabindex="-1">mknod <a class="header-anchor" href="#mknod" aria-hidden="true">#</a></h1><p>创建字符设备文件和块设备文件</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>mknod命令</strong> 用于创建Linux中的字符设备文件和块设备文件。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">mknod(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-Z：设置安全的上下文；</span></span>
<span class="line"><span style="color:#FFCB6B;">-m：设置权限模式；</span></span>
<span class="line"><span style="color:#FFCB6B;">-help：显示帮助信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">--version：显示版本信息。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><ul><li>文件名：要创建的设备文件名；</li><li>类型：指定要创建的设备文件的类型；</li><li>主设备号：指定设备文件的主设备号；</li><li>次设备号：指定设备文件的次设备号。</li></ul><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-la</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/dev/ttyUSB</span><span style="color:#EEFFFF;">*</span></span>
<span class="line"><span style="color:#FFCB6B;">crw-rw—-</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">root</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">dialout</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">188</span><span style="color:#C3E88D;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2008</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">02</span><span style="color:#C3E88D;">-</span><span style="color:#F78C6C;">13</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">18</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">32</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/dev/ttyUSB0</span></span>
<span class="line"><span style="color:#FFCB6B;">mknod</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/dev/ttyUSB32</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">c</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">188</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">32</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="扩展知识" tabindex="-1">扩展知识 <a class="header-anchor" href="#扩展知识" aria-hidden="true">#</a></h3><p>Linux的设备管理是和文件系统紧密结合的，各种设备都以文件的形式存放在/dev目录 下，称为设备文件。应用程序可以打开、关闭和读写这些设备文件，完成对设备的操作，就像操作普通的数据文件一样。</p><p>为了管理这些设备，系统为设备编了号，每 个设备号又分为主设备号和次设备号。主设备号用来区分不同种类的设备，而次设备号用来区分同一类型的多个设备。对于常用设备，Linux有约定俗成的编 号，如硬盘的主设备号是3。</p><p>Linux为所有的设备文件都提供了统一的操作函数接口，方法是使用数据结构struct file_operations。这个数据结构中包括许多操作函数的指针，如open()、close()、read()和write()等，但由于外设 的种类较多，操作方式各不相同。Struct file_operations结构体中的成员为一系列的接口函数，如用于读/写的read/write函数和用于控制的ioctl等。</p><p>打开一个文件就是调用这个文件file_operations中的open操作。不同类型的文件有不同的file_operations成员函数，如普通的磁盘数据文件， 接口函数完成磁盘数据块读写操作；而对于各种设备文件，则最终调用各自驱动程序中的I/O函数进行具体设备的操作。这样，应用程序根本不必考虑操作的是设 备还是普通文件，可一律当作文件处理，具有非常清晰统一的I/O接口。所以file_operations是文件层次的I/O接口。</p>`,17),o=[p];function r(t,i,c,d,F,h){return n(),a("div",null,o)}const C=s(l,[["render",r]]);export{u as __pageData,C as default};

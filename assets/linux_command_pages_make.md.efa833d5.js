import{_ as s,c as a,o as n,a as e}from"./app.82736834.js";const u=JSON.parse('{"title":"make","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"知识扩展","slug":"知识扩展","link":"#知识扩展","children":[]}]}],"relativePath":"linux/command/pages/make.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/make.md"},p=e(`<h1 id="make" tabindex="-1">make <a class="header-anchor" href="#make" aria-hidden="true">#</a></h1><p>GNU的工程化编译工具</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>make命令</strong> 是GNU的工程化编译工具，用于编译众多相互关联的源代码文件，以实现工程化的管理，提高开发效率。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">make(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-f：指定“makefile”文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">-i：忽略命令执行返回的出错信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-s：沉默模式，在执行之前不输出相应的命令行信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-r：禁止使用build-in规则；</span></span>
<span class="line"><span style="color:#FFCB6B;">-n：非执行模式，输出所有执行命令，但并不执行；</span></span>
<span class="line"><span style="color:#FFCB6B;">-t：更新目标文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">-q：make操作将根据目标文件是否已经更新返回&quot;0&quot;或非&quot;0&quot;的状态信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-p：输出所有宏定义和目标文件描述；</span></span>
<span class="line"><span style="color:#FFCB6B;">-d：Debug模式，输出有关文件和检测时间的详细信息。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Linux下常用选项与Unix系统中稍有不同，下面是不同的部分：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-c</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">dir：在读取</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">makefile</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">之前改变到指定的目录dir；</span></span>
<span class="line"><span style="color:#FFCB6B;">-I</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">dir：当包含其他</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">makefile文件时，利用该选项指定搜索目录；</span></span>
<span class="line"><span style="color:#FFCB6B;">-h：help文挡，显示所有的make选项；</span></span>
<span class="line"><span style="color:#FFCB6B;">-w：在处理</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">makefile</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">之前和之后，都显示工作目录。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><p>目标：指定编译目标。</p><h3 id="知识扩展" tabindex="-1">知识扩展 <a class="header-anchor" href="#知识扩展" aria-hidden="true">#</a></h3><p>无论是在linux 还是在Unix环境 中，make都是一个非常重要的编译命令。不管是自己进行项目开发还是安装应用软件，我们都经常要用到make或make install。利用make工具，我们可以将大型的开发项目分解成为多个更易于管理的模块，对于一个包括几百个源文件的应用程序，使用make和 makefile工具就可以简洁明快地理顺各个源文件之间纷繁复杂的相互关系。</p><p>而且如此多的源文件，如果每次都要键入gcc命令进行编译的话，那对程序员 来说简直就是一场灾难。而make工具则可自动完成编译工作，并且可以只对程序员在上次编译后修改过的部分进行编译。</p><p>因此，有效的利用make和 makefile工具可以大大提高项目开发的效率。同时掌握make和makefile之后，您也不会再面对着Linux下的应用软件手足无措了。</p>`,16),r=[p];function i(c,t,o,d,m,F){return n(),a("div",null,r)}const b=s(l,[["render",i]]);export{u as __pageData,b as default};

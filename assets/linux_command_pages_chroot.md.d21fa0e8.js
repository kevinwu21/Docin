import{_ as s,c as a,o as n,a as e}from"./app.82736834.js";const u=JSON.parse('{"title":"chroot","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"relativePath":"linux/command/pages/chroot.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/chroot.md"},p=e(`<h1 id="chroot" tabindex="-1">chroot <a class="header-anchor" href="#chroot" aria-hidden="true">#</a></h1><p>把根目录换成指定的目的目录</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>chroot命令</strong> 用来在指定的根目录下运行指令。chroot，即 change root directory （更改 root 目录）。在 linux 系统中，系统默认的目录结构都是以<code>/</code>，即是以根 (root) 开始的。而在使用 chroot 之后，系统的目录结构将以指定的位置作为<code>/</code>位置。</p><p>在经过 chroot 命令之后，系统读取到的目录和文件将不在是旧系统根下的而是新根下（即被指定的新的位置）的目录结构和文件，因此它带来的好处大致有以下3个：</p><p><strong>增加了系统的安全性，限制了用户的权力：</strong></p><p>在经过 chroot 之后，在新根下将访问不到旧系统的根目录结构和文件，这样就增强了系统的安全性。这个一般是在登录 (login) 前使用 chroot，以此达到用户不能访问一些特定的文件。</p><p><strong>建立一个与原系统隔离的系统目录结构，方便用户的开发：</strong></p><p>使用 chroot 后，系统读取的是新根下的目录和文件，这是一个与原系统根下文件不相关的目录结构。在这个新的环境中，可以用来测试软件的静态编译以及一些与系统不相关的独立开发。</p><p><strong>切换系统的根目录位置，引导 Linux 系统启动以及急救系统等：</strong></p><p>chroot 的作用就是切换系统的根位置，而这个作用最为明显的是在系统初始引导磁盘的处理过程中使用，从初始 RAM 磁盘 (initrd) 切换系统的根位置并执行真正的 init。另外，当系统出现一些问题时，我们也可以使用 chroot 来切换到一个临时的系统。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">chroot(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">--help：在线帮助；</span></span>
<span class="line"><span style="color:#FFCB6B;">--version：显示版本信息。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><ul><li>目录：指定新的根目录；</li><li>指令：指定要执行的指令。</li></ul><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><p><strong>将target作为根目录（运行其中的<code>/bin/sh</code>）:</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">chroot</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">target</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/bin/sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里,target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样，将会进入一个shell界面，这个shell以target为根。运行exit退出该shell又返回原来的本机环境了，也可以使用Ctrl+D。</p><p>注意：</p><ul><li>根用户才行</li><li>如果直接chroot target默认寻找target的/bin/bash.这会以target作为根目录</li></ul><p>将target作为根目录(运行其中的<code>/bin/ls</code>):</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">chroot</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">target</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/bin/ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里，target是busybox安装好的路径，类似一个文件系统包含了许多工具。这样运行的是target中的ls（不是本机的<code>/bin/ls</code>），然后返回立即本机的目录环境。</p><p>注意，自己在本地编译一个程序生成a.out之后，拷进<code>target/bin/</code>中这样运行却不行,因为它包含了动态连接的库，需要用ldd查看a.out需要那些动态库，将这些库拷贝到新根的对应路径下才能执行。</p><p><strong>用chroot运行自己编译的一个程序：</strong></p><p>准备chroot的根目录：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">newRoot</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编译自己的程序：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">main.c</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里main.c生成a.out，功能是输出hello。</p><p>查看程序需要的库：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">ldd</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">a.out</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输入之后，输出如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">linux-gate.so.1</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#EEFFFF;">  </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0xb8034000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">libc.so.6</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">gt</span><span style="color:#89DDFF;">;</span><span style="color:#EEFFFF;"> </span><span style="color:#FFCB6B;">/lib/tls/i686/cmov/libc.so.6</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0xb7eab000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">/lib/ld-linux.so.2</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0xb801a000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>将程序需要的库和程序拷贝到新根目录下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">a.out</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">newRoot</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">newRoot/lib</span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/lib/tls/i686/cmov/libc.so.</span><span style="color:#F78C6C;">6</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">newRoot/lib</span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/lib/ld-linux.so.</span><span style="color:#F78C6C;">2</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">newRoot/lib</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里newRoot内容将如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">a.out</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">lib/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用chroot运行自己的程序：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">su</span></span>
<span class="line"><span style="color:#FFCB6B;">chroot</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">newRoot</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">/a.out</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样就能够正确运行a.out了，因为a.out使用到了其他的动态连接库，所以需要将库拷贝到newRoot中，如果没有其他库那么直接拷贝a.out就能运行。例如静态编译后的busybox，其安装目录中的<code>/bin/busybox</code>就没有依赖其他库。</p>`,44),o=[p];function r(t,c,i,d,F,h){return n(),a("div",null,o)}const y=s(l,[["render",r]]);export{u as __pageData,y as default};

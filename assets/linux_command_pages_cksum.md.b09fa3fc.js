import{_ as s,c as a,o as e,a as n}from"./app.82736834.js";const b=JSON.parse('{"title":"cksum","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"relativePath":"linux/command/pages/cksum.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/cksum.md"},t=n(`<h1 id="cksum" tabindex="-1">cksum <a class="header-anchor" href="#cksum" aria-hidden="true">#</a></h1><p>检查文件的CRC是否正确</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>cksum命令</strong> 是检查文件的CRC是否正确，确保文件从一个系统传输到另一个系统的过程中不被损坏。这种方法要求校验和在源系统中被计算出来，在目的系统中又被计算一次，两个数字进行比较，如果校验和相等，则该文件被认为是正确传输了。</p><p>注意：CRC是指一种排错检查方法，即循环冗余校验法。</p><p>指定文件交由cksum命令进行校验后，会返回校验结果供用户核对文件是否正确无误。若不指定任何文件名称或是所给予的文件名为&quot;-&quot;，则cksum命令会从标准输入设备中读取数据。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">cksum(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">--help：在线帮助；</span></span>
<span class="line"><span style="color:#FFCB6B;">--version：显示版本信息。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><p>文件：指定要计算校验的版本信息。</p><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><p>使用cksum命令计算文件&quot;testfile1&quot;的完整性，输入如下命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">cksum</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">testfile1</span><span style="color:#EEFFFF;">            </span><span style="color:#545454;font-style:italic;">#对指定文件进行CRC校验</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上命令执行后，将输出校验码等相关的信息，具体输出信息如下所示：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">1263453430</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">78</span><span style="color:#EEFFFF;"> testfile1     </span><span style="color:#545454;font-style:italic;">#输出信息</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面的输出信息中，&quot;1263453430&quot;表示校验码，&quot;78&quot;表示字节数。</p><p>注意：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。</p>`,19),r=[t];function i(p,c,o,d,u,h){return e(),a("div",null,r)}const F=s(l,[["render",i]]);export{b as __pageData,F as default};

import{_ as s,c as a,o as n,a as e}from"./app.82736834.js";const b=JSON.parse('{"title":"ssh","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"背后故事","slug":"背后故事","link":"#背后故事","children":[]}]}],"relativePath":"linux/command/pages/ssh.md","lastUpdated":1666509709000}'),l={name:"linux/command/pages/ssh.md"},p=e(`<h1 id="ssh" tabindex="-1">ssh <a class="header-anchor" href="#ssh" aria-hidden="true">#</a></h1><p>openssh套件中的客户端连接工具</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>ssh命令</strong> 是openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">ssh(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-1：强制使用ssh协议版本1；</span></span>
<span class="line"><span style="color:#FFCB6B;">-2：强制使用ssh协议版本2；</span></span>
<span class="line"><span style="color:#FFCB6B;">-4：强制使用IPv4地址；</span></span>
<span class="line"><span style="color:#FFCB6B;">-6：强制使用IPv6地址；</span></span>
<span class="line"><span style="color:#FFCB6B;">-A：开启认证代理连接转发功能；</span></span>
<span class="line"><span style="color:#FFCB6B;">-a：关闭认证代理连接转发功能；</span></span>
<span class="line"><span style="color:#FFCB6B;">-b：使用本机指定地址作为对应连接的源ip地址；</span></span>
<span class="line"><span style="color:#FFCB6B;">-C：请求压缩所有数据；</span></span>
<span class="line"><span style="color:#FFCB6B;">-F：指定ssh指令的配置文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">-f：后台执行ssh指令；</span></span>
<span class="line"><span style="color:#FFCB6B;">-g：允许远程主机连接主机的转发端口；</span></span>
<span class="line"><span style="color:#FFCB6B;">-i：指定身份(私钥</span><span style="color:#EEFFFF;">)文件；</span></span>
<span class="line"><span style="color:#FFCB6B;">-l：指定连接远程服务器登录用户名；</span></span>
<span class="line"><span style="color:#FFCB6B;">-N：不执行远程指令；</span></span>
<span class="line"><span style="color:#FFCB6B;">-o：指定配置选项；</span></span>
<span class="line"><span style="color:#FFCB6B;">-p：指定远程服务器上的端口；</span></span>
<span class="line"><span style="color:#FFCB6B;">-q：静默模式；</span></span>
<span class="line"><span style="color:#FFCB6B;">-X：开启X11转发功能；</span></span>
<span class="line"><span style="color:#FFCB6B;">-x：关闭X11转发功能；</span></span>
<span class="line"><span style="color:#FFCB6B;">-y：开启信任X11转发功能。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><ul><li>远程主机：指定要连接的远程ssh服务器；</li><li>指令：要在远程ssh服务器上执行的指令。</li></ul><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#545454;font-style:italic;"># ssh 用户名@远程服务器地址</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">user1@172.24.210.101</span></span>
<span class="line"><span style="color:#545454;font-style:italic;"># 指定端口</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2211</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">root@140.206.185.170</span></span>
<span class="line"></span>
<span class="line"><span style="color:#545454;font-style:italic;"># ssh 大家族</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">22</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">user@ip</span><span style="color:#EEFFFF;">  </span><span style="color:#545454;font-style:italic;"># 默认用户名为当前用户名，默认端口为 22</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh-keygen</span><span style="color:#EEFFFF;"> </span><span style="color:#545454;font-style:italic;"># 为当前用户生成 ssh 公钥 + 私钥</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh-keygen</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">keyfile</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">key_format</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">key_format</span><span style="color:#EEFFFF;"> </span><span style="color:#545454;font-style:italic;"># key_format: RFC4716/SSH2(default) PKCS8 PEM</span></span>
<span class="line"><span style="color:#FFCB6B;">ssh-copy-id</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">user@ip:port</span><span style="color:#EEFFFF;"> </span><span style="color:#545454;font-style:italic;"># 将当前用户的公钥复制到需要 ssh 的服务器的 ~/.ssh/authorized_keys，之后可以免密登录</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="背后故事" tabindex="-1">背后故事 <a class="header-anchor" href="#背后故事" aria-hidden="true">#</a></h3><blockquote><p>英文：Tatu Ylonen<br> 编译：Linux中国/kenxx<br> 来源：<a href="https://linux.cn/article-8476-1.html" target="_blank" rel="noreferrer">https://linux.cn/article-8476-1.html</a></p></blockquote><p>为什么 SSH（安全终端）的端口号是 22 呢，这不是一个巧合，这其中有个我（Tatu Ylonen，SSH 协议的设计者）未曾诉说的故事。</p><h4 id="将-ssh-协议端口号设为-22-的故事" tabindex="-1">将 SSH 协议端口号设为 22 的故事 <a class="header-anchor" href="#将-ssh-协议端口号设为-22-的故事" aria-hidden="true">#</a></h4><p>1995 年春我编写了 SSH 协议的最初版本，那时候 telnet 和 FTP 正被广泛使用。</p><p>当时我设计 SSH 协议想着是为了替代 telnet（端口 23）和 ftp（端口21）两个协议的，而端口 22 是空闲的。我想当然地就选择了夹在 telnet 和 ftp 的端口中间的数字。我觉得端口号虽然是个小事但似乎又存在着某种信念。但我到底要怎么拿到那个端口号呢？我未曾拥有过任何一个端口号，但我却认识几个拥有端口号的人！</p><p>在那时取得端口号的事情其实说来挺简单的。毕竟当时的因特网（Internet）并不是很大，是因特网爆炸的早期。端口号分配的活儿是 IANA（Internet Assigned Numbers Authority，互联网数字分配机构）干的。在那时这机构可相当于是因特网先驱 <a href="https://en.wikipedia.org/wiki/Jon_Postel" target="_blank" rel="noreferrer">Jon Postel</a> 和 <a href="https://en.wikipedia.org/wiki/Joyce_K._Reynolds" target="_blank" rel="noreferrer">Joyce K. Reynolds</a> 一般的存在。Jon 参与编写了多项主要的协议标准，例如 IP（RFC 791）、ICMP（RFC 792）和 TCP（RFC 793）等一些你应该早有耳闻的协议。</p><p>我可以说是敬畏 Jon 先生的，他参与编写了几乎所有主要的因特网标准文档（Internet RFC）！</p><p>1995 年 7 月，就在我发布 ssh-1.0 前，我发送了一封邮件给 IANA：</p><blockquote><p>From ylo Mon Jul 10 11:45:48 +0300 1995<br> From: Tatu Ylonen<br> To: Internet Assigned Numbers Authority<br> Subject: 请求取得一个端口号<br> Organization: 芬兰赫尔辛基理工大学</p><p>亲爱的机构成员：</p><p>我写了个可以在不安全的网络环境中安全地从一台机器登录到另一台机器的程序。它主要是对现有的 telnet 协议以及 rlogin 协议的功能性提升和安全性改进。说的具体些，就是可以防御 IP、DNS &gt; 或路由等欺骗行为。我打算将我的软件免费地发布在因特网上，以得到广泛地使用。</p><p>我希望为该软件注册一个特权端口号，要是这个端口号在 1 到 255 &gt; 之间就更好了，这样它就可以用在名字服务器的 WKS 字段中了。</p><p>我在附件中附上了协议标准的草案。这个软件已经在本地运行了几个月了，我已准备在获得端口号后就发布。如果端口号分配一事安排的及时，我希望这周就将要发布的软件准备好。我目前在 beta 版测试时使用的端口号是 &gt; 22，如果要是能够分配到这个端口，我就不用做什么更改了（目前这个端口在列表中还是空闲的）。</p><p>软件中服务的名称叫 ssh（系 Secure Shell 的缩写）。</p><p>您最真诚的，<br> Tatu Ylonen</p></blockquote><p>（LCTT 译注：DNS 协议中的 WKS 记录类型意即“众所周知的业务描述”，是类似于 A、MX 这样的 DNS 记录类型，用于描述某个 IP 所提供的服务，目前鲜见使用。参见： <a href="https://docs.oracle.com/cd/E19683-01/806-4077/dnsintro-154/index.html" target="_blank" rel="noreferrer">https://docs.oracle.com/cd/E19683-01/806-4077/dnsintro-154/index.html</a> 。）</p><p>第二天，我就收到了 Joyce 发来的邮件：</p><blockquote><p>Date: Mon, 10 Jul 1995 15:35:33 -0700<br> From: <a href="mailto:jkrey@ISI.EDU" target="_blank" rel="noreferrer">jkrey@ISI.EDU</a><br> To: <a href="mailto:ylo@cs.hut.fi" target="_blank" rel="noreferrer">ylo@cs.hut.fi</a><br> Subject: 回复：请求取得一个端口号<br> Cc: <a href="mailto:iana@ISI.EDU" target="_blank" rel="noreferrer">iana@ISI.EDU</a><br> Tatu,<br> 我们将端口号 22 分配给 ssh 服务了，你目前是该服务的主要联系人。<br> Joyce</p></blockquote><p>这就搞定了！SSH 的端口正式使用 22！！！</p><p>1995 年 7 月 12 日上午 2 点 21 分，我给我在赫尔辛基理工大学的测试者们宣布了 SSH 的最后 beta 版本。当日下午 5 点 23 分，我给测试者们宣布了 ssh-1.0.0 版本。1995 年 7 月 12 日，下午 5 点 51 分，我将一份 SSH（安全终端）的宣告发给了 <a href="mailto:cypherpunks@toad.com" target="_blank" rel="noreferrer">cypherpunks@toad.com</a> 的邮件列表，此外我还将其发给了一些新闻组、邮件列表和一些在因特网上讨论相关话题的人们。</p><h4 id="如何更改-ssh-服务的端口号" tabindex="-1">如何更改 SSH 服务的端口号 <a class="header-anchor" href="#如何更改-ssh-服务的端口号" aria-hidden="true">#</a></h4><p>SSH 服务器是默认运行在 22 号端口上的。然而，由于某些原因需要，它也可以运行在别的端口上。比如为了方便测试使用，又比如在同一个宿主机上运行多个不同的配置。当然，极少情况下，不使用 root 权限运行它也可以，比如某些必须运行在非特权的端口的情况（端口号大于等于 1024）。</p><p>端口号可以在配置文件 /etc/ssh/sshd_config 中将 Port 22 更改。也可以使用 -p 选项运行 sshd。SSH 客户端和 sftp 程序也可以使用 -p 选项。</p><h4 id="配置-ssh-协议穿越防火墙" tabindex="-1">配置 SSH 协议穿越防火墙 <a class="header-anchor" href="#配置-ssh-协议穿越防火墙" aria-hidden="true">#</a></h4><p>SSH 是少数通常被许可穿越防火墙的协议之一。通常的做法是不限制出站的 SSH 连接，尤其常见于一些较小的或者比较技术型的组织中，而入站的 SSH 连接通常会限制到一台或者是少数几台服务器上。</p><h4 id="出站的-ssh-连接" tabindex="-1">出站的 SSH 连接 <a class="header-anchor" href="#出站的-ssh-连接" aria-hidden="true">#</a></h4><p>在防火墙中配置出站的 SSH 连接十分简单。如果完全限制了外发连接，那么只需要创建一个允许 TCP 端口 22 可以外发的规则即可。如果你想限制目标地址，你可以限制该规则仅允许访问你的组织放在云端的外部服务器或保护该云端的跳板服务器即可。</p><h4 id="反向通道是有风险的" tabindex="-1">反向通道是有风险的 <a class="header-anchor" href="#反向通道是有风险的" aria-hidden="true">#</a></h4><p>其实不限制出站的 SSH 连接虽然是可以的，但是是存在风险的，SSH 协议是支持 通道访问 的。最初的想法是在外部服务器搭建一个 SSH 服务监听来自各处的连接，将进入的连接转发到组织，并让这个连接可以访问某个内部服务器。</p><p>在某些场景下这当然非常的方便。开发者和系统管理员经常使用它打开一个通道以便于他们可以远程访问，比如在家里或者在旅行中使用笔记本电脑等场景。</p><p>然而通常来讲这些做法是违背安全策略的，跳过了防火墙管理员和安全团队保护的控制无疑是违背安全策略的，比如这些： PCI、HIPAA、NIST SP 800-53 等。它可以被黑客和外国情报机构用来在组织内留下后门。</p><p>CryptoAuditor 是一款可以控制通道穿过防火墙或者一组云端服务器入口的产品。该款产品可以配合 通用 SSH 密钥管理器（Universal SSH Key Manager） 来获得对 主机密钥（host keys）的访问，以在启用防火墙并阻挡未授权转发的场景中解密 SSH 会话。</p><h4 id="入站的-ssh-访问" tabindex="-1">入站的 SSH 访问 <a class="header-anchor" href="#入站的-ssh-访问" aria-hidden="true">#</a></h4><p>对于入站访问而言，这里有几点需要说一下：</p><p>配置防火墙，并转发所有去往 22 端口的连接只能流向到一个特定的内部网络 IP 地址或者一个 DMZ 主机。在该 IP 上运行 CryptoAuditor 或者跳板机来控制和审查所有访问该组织的连接。 在防火墙上使用不同的端口访问不同的服务器。 只允许使用 IPsec 协议这样的 VPN（虚拟专用网）登录后连接 SSH 服务。</p><h4 id="通过-iptables-服务限制-ssh-访问" tabindex="-1">通过 iptables 服务限制 SSH 访问 <a class="header-anchor" href="#通过-iptables-服务限制-ssh-访问" aria-hidden="true">#</a></h4><p>iptables 是一款内建在 Linux 内核的宿主防火墙。通常配置用于保护服务器以防止被访问那些未明确开启的端口。</p><p>如果服务器上启用了 iptables，使用下面的命令将可以允许进入的 SSH 访问，当然命令需要以 root 身份运行。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">iptables</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-A</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">INPUT</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">tcp</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">--dport</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">22</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">conntrack</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">--ctstate</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">NEW,ESTABLISHED</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-j</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">ACCEPT</span></span>
<span class="line"><span style="color:#FFCB6B;">iptables</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-A</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">OUTPUT</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">tcp</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">--sport</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">22</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">conntrack</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">--ctstate</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">ESTABLISHED</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-j</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">ACCEPT</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果你想将上述命令创建的规则持久地保存，在某些系统版本中，可使用如下命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">service</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">iptables</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">save</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,48),r=[p];function o(t,c,i,F,h,d){return n(),a("div",null,r)}const E=s(l,[["render",o]]);export{b as __pageData,E as default};

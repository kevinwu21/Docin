import{_ as s,c as a,o as e,a as l}from"./app.82736834.js";const y=JSON.parse('{"title":"trap","description":"","frontmatter":{},"headers":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"主要用途","slug":"主要用途","link":"#主要用途","children":[]},{"level":2,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":2,"title":"关于信号","slug":"关于信号","link":"#关于信号","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[{"level":3,"title":"1 清理临时文件","slug":"_1-清理临时文件","link":"#_1-清理临时文件","children":[]},{"level":3,"title":"2 忽略信号","slug":"_2-忽略信号","link":"#_2-忽略信号","children":[]},{"level":3,"title":"3 重置陷阱","slug":"_3-重置陷阱","link":"#_3-重置陷阱","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]}],"relativePath":"linux/command/pages/trap.md","lastUpdated":1666509709000}'),n={name:"linux/command/pages/trap.md"},t=l(`<h1 id="trap" tabindex="-1">trap <a class="header-anchor" href="#trap" aria-hidden="true">#</a></h1><p>捕捉信号和其他事件并执行命令。</p><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-hidden="true">#</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">trap</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#EEFFFF;">-lp</span><span style="color:#89DDFF;">]</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#EEFFFF;">arg</span><span style="color:#89DDFF;">]</span><span style="color:#EEFFFF;"> signal_spec ...</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="主要用途" tabindex="-1">主要用途 <a class="header-anchor" href="#主要用途" aria-hidden="true">#</a></h2><ul><li>用于指定在接收到信号后将要采取的动作。</li><li>脚本程序被中断时执行清理工作。</li></ul><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-l</span><span style="color:#EEFFFF;">    </span><span style="color:#C3E88D;">打印信号名称以及信号名称对应的数字。</span></span>
<span class="line"><span style="color:#FFCB6B;">-p</span><span style="color:#EEFFFF;">    </span><span style="color:#C3E88D;">显示与每个信号关联的trap命令。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h2><p>arg：接收到信号时执行的命令。</p><p>signal_spec：信号名称或信号名称对应的数字。</p><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-hidden="true">#</a></h2><p>如果表达式执行结果为成功时返回0，当参数 <code>signal_spec</code> 没有指定有效值时返回1。</p><h2 id="关于信号" tabindex="-1">关于信号 <a class="header-anchor" href="#关于信号" aria-hidden="true">#</a></h2><p>信号是一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)。应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉。进程收到一个信号后，会检查对该信号的处理机制。如果是SIG_IGN，就忽略该信号；如果是SIG_DFT，则会采用系统默认的处理动作，通常是终止进程或忽略该信号；如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务。</p><p>在有些情况下，我们不希望自己的shell脚本在运行时刻被中断，比如说我们写得shell脚本设为某一用户的默认shell，使这一用户进入系统后只能作某一项工作，如数据库备份， 我们可不希望用户使用 Ctrl+C 等方法进入到shell状态做我们不希望做的事情。这便用到了信号处理。</p><p>以下是一些你可能会遇到的常见信号：</p><table><thead><tr><th>信号名称</th><th>信号数</th><th>描述</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>本信号在用户终端连接（正常或非正常）结束时发出，通常是在终端的控制进程结束时，通知同一session内的各个作业，这时它们与控制终端不再关联。登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进程组和后台有终端输出的进程就会中止。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。</td></tr><tr><td>SIGINT</td><td>2</td><td>程序终止(interrupt)信号，在用户键入 Ctrl+C 时发出。</td></tr><tr><td>SIGQUIT</td><td>3</td><td>和SIGINT类似，但由QUIT字符(通常是Ctrl /)来控制。进程在因收到SIGQUIT退出时会产生core文件，在这个意义上类似于一个程序错误信号。</td></tr><tr><td>SIGFPE</td><td>8</td><td>在发生致命的算术运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等其它所有的算术错误。</td></tr><tr><td>SIGKILL</td><td>9</td><td>用来立即结束程序的运行。本信号不能被阻塞，处理和忽略。</td></tr><tr><td>SIGALRM</td><td>14</td><td>时钟定时信号，计算的是实际的时间或时钟时间。alarm 函数使用该信号。</td></tr><tr><td>SIGTERM</td><td>15</td><td>程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理. 通常用来要求程序自己正常退出；kill 命令缺省产生这个信号。</td></tr></tbody></table><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-hidden="true">#</a></h2><p>当shell收到 <code>HUP INT PIPE QUIT TERM</code> 这几个命令时，当前执行的程序会执行 <code>exit 1</code>。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#EEFFFF;">root@pc root</span><span style="color:#89DDFF;">]</span><span style="color:#EEFFFF;">$ trap</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">exit 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> HUP INT PIPE QUIT TERM</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-清理临时文件" tabindex="-1">1 清理临时文件 <a class="header-anchor" href="#_1-清理临时文件" aria-hidden="true">#</a></h3><p>下面展示了如果有人试图从终端中止程序时，如何删除文件然后退出：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">trap</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rm -f </span><span style="color:#EEFFFF;">$WORKDIR</span><span style="color:#C3E88D;">/work1 </span><span style="color:#EEFFFF;">$WORKDIR</span><span style="color:#C3E88D;">/dataout; exit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行shell程序，如果程序接收信号为2，那么这两个文件 （work1 和 dataout） 将被自动删除。</p><p>添加信号1 <code>SIGHUP</code>：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">trap</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rm </span><span style="color:#EEFFFF;">$WORKDIR</span><span style="color:#C3E88D;">/work1 </span><span style="color:#EEFFFF;">$WORKDIR</span><span style="color:#C3E88D;">/dataout; exit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-忽略信号" tabindex="-1">2 忽略信号 <a class="header-anchor" href="#_2-忽略信号" aria-hidden="true">#</a></h3><p>如果陷阱列出的命令是空的，指定的信号接收时，将被忽略：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">trap</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>忽略多个信号：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">trap</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">15</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-重置陷阱" tabindex="-1">3 重置陷阱 <a class="header-anchor" href="#_3-重置陷阱" aria-hidden="true">#</a></h3><p>当你改变了收到信号后采取的动作，你可以省略第一个参数来重置到默认行为。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">trap</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#EEFFFF;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-hidden="true">#</a></h3><ol><li><code>trap -l</code> 等价于执行 <code>kill -l</code>。</li><li>发送信号请查看 <code>kill</code> 命令。</li><li>该命令是bash内建命令，相关的帮助信息请查看 <code>help</code> 命令。</li><li>建议您阅读以下参考资料来深入了解该命令：</li></ol><ul><li><a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-trap" target="_blank" rel="noreferrer">GNU 官方手册： trap命令</a></li><li><a href="https://blog.csdn.net/elbort/article/details/8525599" target="_blank" rel="noreferrer">Linux Shell的信号trap功能你必须知道的细节</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/12/mktemp.html" target="_blank" rel="noreferrer">阮一峰： Bash 脚本如何创建临时文件：mktemp 命令和 trap 命令教程</a></li><li><a href="https://blog.csdn.net/iEearth/article/details/52612557" target="_blank" rel="noreferrer">【Bash百宝箱】shell内建命令之trap</a></li></ul>`,38),r=[t];function p(o,i,d,c,F,h){return e(),a("div",null,r)}const E=s(n,[["render",p]]);export{y as __pageData,E as default};

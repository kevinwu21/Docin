import{_ as s,c as a,o as n,a as l}from"./app.82736834.js";const u=JSON.parse('{"title":"killall","description":"","frontmatter":{},"headers":[{"level":2,"title":"补充说明","slug":"补充说明","link":"#补充说明","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]}]}],"relativePath":"linux/command/pages/killall.md","lastUpdated":1666509709000}'),e={name:"linux/command/pages/killall.md"},p=l(`<h1 id="killall" tabindex="-1">killall <a class="header-anchor" href="#killall" aria-hidden="true">#</a></h1><p>使用进程的名称来杀死一组进程</p><h2 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-hidden="true">#</a></h2><p><strong>killall命令</strong> 使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">killall(选项</span><span style="color:#EEFFFF;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">-e：对长名称进行精确匹配；</span></span>
<span class="line"><span style="color:#FFCB6B;">-l：忽略大小写的不同；</span></span>
<span class="line"><span style="color:#FFCB6B;">-p：杀死进程所属的进程组；</span></span>
<span class="line"><span style="color:#FFCB6B;">-i：交互式杀死进程，杀死进程前需要进行确认；</span></span>
<span class="line"><span style="color:#FFCB6B;">-l：打印所有已知信号列表；</span></span>
<span class="line"><span style="color:#FFCB6B;">-q：如果没有进程被杀死。则不输出任何信息；</span></span>
<span class="line"><span style="color:#FFCB6B;">-r：使用正规表达式匹配要杀死的进程名称；</span></span>
<span class="line"><span style="color:#FFCB6B;">-s：用指定的进程号代替默认信号“SIGTERM”；</span></span>
<span class="line"><span style="color:#FFCB6B;">-u：杀死指定用户的进程。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h3><p>进程名称：指定要杀死的进程名称。</p><h3 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-darker" tabindex="0"><code><span class="line"><span style="color:#545454;font-style:italic;"># 杀死所有同名进程</span></span>
<span class="line"><span style="color:#FFCB6B;">killall</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">vi</span></span>
<span class="line"><span style="color:#545454;font-style:italic;"># 指定向进程发送的信号</span></span>
<span class="line"><span style="color:#FFCB6B;">killall</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-9</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">vi</span></span>
<span class="line"><span style="color:#545454;font-style:italic;"># 0信号表示不向进程发送信号, 可通过返回值判断进程是否存在, 0(存在)1(不存在)</span></span>
<span class="line"><span style="color:#FFCB6B;">killall</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">-0</span><span style="color:#EEFFFF;"> </span><span style="color:#C3E88D;">vi</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#EEFFFF;"> $?</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,12),r=[p];function i(c,t,o,d,h,F){return n(),a("div",null,r)}const m=s(e,[["render",i]]);export{u as __pageData,m as default};
